-- metrics (modified from Brian's document)

-- full scan
SELECT COUNT() FROM SNOWFLAKE_NATIVE_POC.TAXI.TAXI_INFO;

-- partition pruning
SELECT COUNT()  
FROM SNOWFLAKE_NATIVE_POC.TAXI.TAXI_INFO  
WHERE TPEP_PICKUP_DATETIME BETWEEN '2020-01-01' AND '2020-01-31';  

-- aggregation
SELECT PAYMENT_TYPE, AVG(TOTAL_AMOUNT) AS avg_total  
FROM SNOWFLAKE_NATIVE_POC.TAXI.TAXI_INFO  
GROUP BY PAYMENT_TYPE;  

-- join query 
SELECT t.RATECODEID, r.RATECODE_DESCRIPTION, COUNT() AS trip_count FROM SNOWFLAKE_NATIVE_POC.TAXI.TAXI_INFO t 
JOIN SNOWFLAKE_POC.ICEBERG_FULL.RATECODES r 
ON t.RATECODEID = r.RATECODE_ID 
GROUP BY t.RATECODEID, r.RATECODE_DESCRIPTION;

-- top-N query 
SELECT VENDORID, SUM(TOTAL_AMOUNT) AS revenue FROM SNOWFLAKE_NATIVE_POC.TAXI.TAXI_INFO GROUP BY VENDORID ORDER BY revenue DESC LIMIT 10; 

-- multi-level join with aggregation 

-- window function for ranking
SELECT VENDORID, TOTAL_AMOUNT, RANK() OVER (PARTITION BY VENDORID ORDER BY TOTAL_AMOUNT DESC) AS rank_within_vendor FROM SNOWFLAKE_NATIVE_POC.TAXI.TAXI_INFO; 

-- subquery for conditional aggregation 
SELECT VENDORID, (SELECT AVG(TOTAL_AMOUNT) FROM SNOWFLAKE_NATIVE_POC.TAXI.TAXI_INFO t2 WHERE t2.VENDORID = t1.VENDORID AND t2.PAYMENT_TYPE = 'Credit') AS avg_credit_payment FROM SNOWFLAKE_NATIVE_POC.TAXI.TAXI_INFO t1 GROUP BY VENDORID; 

-- cte with filtering and aggregation 
WITH JanuaryTrips AS (SELECT  FROM SNOWFLAKE_POC.ICEBERG_FULL.TAXI_ICEBERG WHERE TPEP_PICKUP_DATETIME BETWEEN '2020-01-01' AND '2020-01-31' ) SELECT PAYMENT_TYPE, COUNT() AS trip_count, AVG(TOTAL_AMOUNT) AS avg_amount FROM JanuaryTrips GROUP BY PAYMENT_TYPE; 

-- conditional aggregation 
SELECT VENDORID, COUNT(CASE WHEN PAYMENT_TYPE = 'Cash' THEN 1 END) AS cash_trips, COUNT(CASE WHEN PAYMENT_TYPE = 'Credit' THEN 1 END) AS credit_trips, AVG(CASE WHEN PAYMENT_TYPE = 'Cash' THEN TOTAL_AMOUNT END) AS avg_cash_amount, AVG(CASE WHEN PAYMENT_TYPE = 'Credit' THEN TOTAL_AMOUNT END) AS avg_credit_amount FROM SNOWFLAKE_POC.ICEBERG_FULL.TAXI_ICEBERG GROUP BY VENDORID; 

-- nested ctes with join and aggregation
WITH FilteredTrips AS ( SELECT  FROM SNOWFLAKE_NATIVE_POC.TAXI.TAXI_INFO WHERE TOTAL_AMOUNT  50 ), VendorStats AS ( SELECT RATECODEID, COUNT() AS high_value_trips FROM
FilteredTrips GROUP BY RATECODEID ) SELECT v.RATECODEID, v.high_value_trips, r.RATECODE_DESCRIPTION FROM VendorStats v JOIN SNOWFLAKE_POC.ICEBERG_FULL.RATECODES r ON v.RATECODEID = r.RATECODE_ID